import{_ as e,o as a,c as s,V as o}from"./chunks/framework.d3b95951.js";const y=JSON.parse('{"title":"Running Commands","description":"","frontmatter":{},"headers":[],"relativePath":"the-basics/running-commands.md","filePath":"the-basics/running-commands.md"}'),n={name:"the-basics/running-commands.md"},l=o('<h1 id="running-commands" tabindex="-1">Running Commands <a class="header-anchor" href="#running-commands" aria-label="Permalink to &quot;Running Commands&quot;">​</a></h1><p>Arch comes with a few commands out of the box. You can see a list of all available commands by running <code>php artisan arch:</code> from the root of your project.</p><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h2><p>The <code>arch:setup</code> command will create a new project in the current directory. This command will create the <code>.arch</code> directory with all the necessary files and directories. It will also create the <code>manifest.yaml</code> file, ready for you to edit.</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">php</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">artisan</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">arch:setup</span></span></code></pre></div><h2 id="build" tabindex="-1">Build <a class="header-anchor" href="#build" aria-label="Permalink to &quot;Build&quot;">​</a></h2><p>The <code>arch:build</code> command will build your project. This command will parse the definitions in your <code>manifest.yaml</code> file. If you don&#39;t have a <code>manifest.yaml</code> file, it will prompt you to run the <code>arch:setup</code> command.</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">php</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">artisan</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">arch:build</span></span></code></pre></div><h2 id="purge" tabindex="-1">Purge <a class="header-anchor" href="#purge" aria-label="Permalink to &quot;Purge&quot;">​</a></h2><p>The <code>arch:purge</code> command will purge your project. This command will delete the <code>.arch</code> directory and all the files and directories inside it. It will also delete the <code>manifest.yaml</code> file and all the files and directories that were generated as a result of it.</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">php</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">artisan</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">arch:purge</span></span></code></pre></div>',11),t=[l];function c(r,i,p,d,h,m){return a(),s("div",null,t)}const C=e(n,[["render",c]]);export{y as __pageData,C as default};
